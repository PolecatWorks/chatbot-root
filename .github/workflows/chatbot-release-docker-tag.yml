name: Tag Docker Image on Release

on:
  release:
    types: [created]

env:
  REGISTRY: ghcr.io


  # IMAGE_NAME will be set in the job using github.repository
  # to ensure it's correctly formatted (lowercase)

jobs:
  tag_and_push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write # Required for cosign if we add signing later, good to have

    steps:

      - name: Set up crane
        uses: imjasonh/setup-crane@v0.1 # Or another installer like iarekylew00t/crane-installer@v3
        with:
          version: latest # Or a specific version like v0.17.0


      - name: Checkout repository
        uses: actions/checkout@v4



      - name: Set up crane
        uses: imjasonh/setup-crane@v0.1 # Or another installer like iarekylew00t/crane-installer@v3
        with:
          version: latest # Or a specific version like v0.17.0


      - name: Login to GHCR
        run: |
          echo "${{ github.token }}" | crane auth login ghcr.io --username ${{ github.actor }} --password-stdin



      - name: Pull, Retag, and Push Docker Image
        run: |
          RELEASE_TAG=${{ github.event.release.tag_name }}
          # Ensure RELEASE_TAG is not empty
          if [ -z "$RELEASE_TAG" ]; then
            echo "Error: Release tag is empty. Skipping Docker tag and push."
            exit 1
          fi

          # The image should have been built and pushed by another workflow, tagged with the commit SHA
          # Let's assume the image name format from other workflows.
          # We need to ensure the IMAGE_NAME is correctly cased (lowercase for ghcr.io)

          IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')

          IMAGE_SHA_TAG="sha-${{ github.sha }}"

          SOURCE_IMAGE="${{ env.REGISTRY }}/${IMAGE_NAME}:${IMAGE_SHA_TAG}"
          TARGET_IMAGE_WITH_RELEASE_TAG="${{ env.REGISTRY }}/${IMAGE_NAME}:${RELEASE_TAG}"

          echo "Planning tagging of: ${SOURCE_IMAGE} as ${TARGET_IMAGE_WITH_RELEASE_TAG}"

          crane copy "${SOURCE_IMAGE}" "${TARGET_IMAGE_WITH_RELEASE_TAG}"
          echo "Successfully tagged ${SOURCE_IMAGE} as ${TARGET_IMAGE_WITH_RELEASE_TAG}"
