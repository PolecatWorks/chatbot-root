name: Tag Docker Image on Release

on:
  release:
    types: [created]

env:
  REGISTRY: ghcr.io


  # IMAGE_NAME will be set in the job using github.repository
  # to ensure it's correctly formatted (lowercase)

jobs:
  tag_and_push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write # Required for cosign if we add signing later, good to have

    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: 1.15

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensure we have all tags and history

      - uses: imjasonh/setup-crane@v0.1

      - name: Login to GHCR
        run: |
          echo "${{ github.token }}" | crane auth login ghcr.io --username ${{ github.actor }} --password-stdin

      - name: Pull, Retag, and Push Docker Image
        id: get_image_info
        run: |
          RELEASE_TAG=${{ github.event.release.tag_name }}
          # Ensure RELEASE_TAG is not empty
          if [ -z "$RELEASE_TAG" ]; then
            echo "Error: Release tag is empty. Skipping Docker tag and push."
            exit 1
          fi

          # The image should have been built and pushed by another workflow, tagged with the commit SHA
          # Let's assume the image name format from other workflows.
          # We need to ensure the IMAGE_NAME is correctly cased (lowercase for ghcr.io)

          IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')

          SOURCE_SHA_TAG="sha-${{ github.sha }}"
          IMAGE_BASE_CHATBOT="${{ env.REGISTRY }}/${IMAGE_NAME}"
          IMAGE_BASE_MCP="${{ env.REGISTRY }}/${IMAGE_NAME}-aiohttp-mcp"

          crane copy "${IMAGE_BASE_CHATBOT}:${SOURCE_SHA_TAG}" "${IMAGE_BASE_CHATBOT}:${RELEASE_TAG}"
          crane copy "${IMAGE_BASE_MCP}:${SOURCE_SHA_TAG}" "${IMAGE_BASE_MCP}:${RELEASE_TAG}"

          # Extract major and minor versions from the semver tag (e.g., v1.2.3)
          if [[ "$RELEASE_TAG" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            crane copy "${IMAGE_BASE_CHATBOT}:${SOURCE_SHA_TAG}" "${IMAGE_BASE_CHATBOT}:${MAJOR}"
            crane copy "${IMAGE_BASE_MCP}:${SOURCE_SHA_TAG}" "${IMAGE_BASE_MCP}:${MAJOR}"

            MINOR="${BASH_REMATCH[1]}.${BASH_REMATCH[2]}"
            crane copy "${IMAGE_BASE_CHATBOT}:${SOURCE_SHA_TAG}" "${IMAGE_BASE_CHATBOT}:${MINOR}"
            crane copy "${IMAGE_BASE_MCP}:${SOURCE_SHA_TAG}" "${IMAGE_BASE_MCP}:${MINOR}"

          else
            echo "Release tag $RELEASE_TAG is not semver (MAJOR.MINOR.PATCH). Skipping major/minor tags."
            MAJOR=""
            MINOR=""
          fi

          echo "IMAGE_DIGEST_CHATBOT=$(crane digest ${IMAGE_BASE_CHATBOT}:${SOURCE_SHA_TAG})" >> $GITHUB_OUTPUT
          echo "IMAGE_DIGEST_MCP=$(crane digest ${IMAGE_BASE_MCP}:${SOURCE_SHA_TAG})" >> $GITHUB_OUTPUT

      - name: Get Previous Tag
        id: get_previous_tag
        run: |
          PREV_TAG=$(git tag --sort=-creatordate | grep -v "^${{ github.event.release.tag_name }}$" | head -n 1)
          if [ -z "$PREV_TAG" ]; then
          echo "No previous tag found."
          PREV_TAG=""
            fi
            echo "PREV_TAG=$PREV_TAG" >> $GITHUB_OUTPUT


      - name: "Build Changelog"
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          failOnError: true
          fromTag: ${{ steps.get_previous_tag.outputs.PREV_TAG }}
          # fromTag: ${{ github.event.release.target_commitish }} # Usually the branch the release was made from
          toTag: ${{ github.event.release.tag_name }}


      - name: Prepare Additional Release Body Content
        id: prepare_additional_body
        run: |
          RELEASE_TAG="${{ github.event.release.tag_name }}"
          IMAGE_NAME_FULL="ghcr.io/${{ github.repository }}"
          IMAGE_DIGEST_CHATBOT="${{ steps.get_image_info.outputs.IMAGE_DIGEST_CHATBOT }}"
          IMAGE_DIGEST_MCP="${{ steps.get_image_info.outputs.IMAGE_DIGEST_MCP }}"
          CHANGELOG_BODY="${{ steps.build_changelog.outputs.changelog }}" # This might be empty if no config

          # Construct the additional release notes markdown for Docker info
          ADDITIONAL_BODY=$(cat <<EOF
          ---

          ## Docker Image

          The Docker image for this release is available at:

          \`${IMAGE_NAME_FULL}:${RELEASE_TAG}\`

          **Pull Command:**
          \`\`\`bash
          docker pull ${IMAGE_NAME_FULL}:${RELEASE_TAG}
          \`\`\`

          **Run Command Example:**
          \`\`\`bash
          docker run -d -p 8080:8080 ${IMAGE_NAME_FULL}:${RELEASE_TAG}
          \`\`\`

          **Chatbot Image Digest (for immutable reference):**
          \`sha256:${IMAGE_DIGEST_CHATBOT}\`

          [Link to GHCR Packages Page](https://github.com/${{ github.repository }}/pkgs/container/${{ github.event.repository.name }})
          EOF
          )
          # Store the content to be appended
          echo "ADDITIONAL_BODY<<EOF" >> $GITHUB_OUTPUT
          echo "${ADDITIONAL_BODY}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update GitHub Release Body
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.release.tag_name }}
          token: ${{ github.token }}
          # Use github.event.release.body for existing content
          # Then append your new Docker info.
          body: |
            ${{ github.event.release.body }}
            ${{ steps.prepare_additional_body.outputs.ADDITIONAL_BODY }}
          draft: ${{ github.event.release.draft }}
          prerelease: ${{ github.event.release.prerelease }}
          # If you want to update existing assets or add new ones, specify here
          # assets: |
          #   ./dist/your-app-binary
          #   ./docker-compose.yml
          # edit_mode: replace # Use 'replace' if you want to completely overwrite the body
          # if not using replace, the body will be appended as above
        env:
          GITHUB_TOKEN: ${{ github.token }}
