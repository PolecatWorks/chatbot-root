name: Tag Docker Image on Release

on:
  release:
    types: [created]

env:
  REGISTRY: ghcr.io


  # IMAGE_NAME will be set in the job using github.repository
  # to ensure it's correctly formatted (lowercase)

jobs:
  tag_and_push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write # Required for cosign if we add signing later, good to have

    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: 1.15

      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: imjasonh/setup-crane@v0.1

      - name: Login to GHCR
        run: |
          echo "${{ github.token }}" | crane auth login ghcr.io --username ${{ github.actor }} --password-stdin

      - name: Pull, Retag, and Push Docker Image
        run: |
          RELEASE_TAG=${{ github.event.release.tag_name }}
          # Ensure RELEASE_TAG is not empty
          if [ -z "$RELEASE_TAG" ]; then
            echo "Error: Release tag is empty. Skipping Docker tag and push."
            exit 1
          fi

          # The image should have been built and pushed by another workflow, tagged with the commit SHA
          # Let's assume the image name format from other workflows.
          # We need to ensure the IMAGE_NAME is correctly cased (lowercase for ghcr.io)

          IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')

          SOURCE_SHA_TAG="sha-${{ github.sha }}"
          IMAGE_BASE_CHATBOT="${{ env.REGISTRY }}/${IMAGE_NAME}"
          IMAGE_BASE_MCP="${{ env.REGISTRY }}/${IMAGE_NAME}-aiohttp-mcp"

          crane copy "${IMAGE_BASE_CHATBOT}:${SOURCE_SHA_TAG}" "${IMAGE_BASE_CHATBOT}:${RELEASE_TAG}"
          crane copy "${IMAGE_BASE_MCP}:${SOURCE_SHA_TAG}" "${IMAGE_BASE_MCP}:${RELEASE_TAG}"

          # Extract major and minor versions from the semver tag (e.g., v1.2.3)
          if [[ "$RELEASE_TAG" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            crane copy "${IMAGE_BASE_CHATBOT}:${SOURCE_SHA_TAG}" "${IMAGE_BASE_CHATBOT}:${MAJOR}"
            crane copy "${IMAGE_BASE_MCP}:${SOURCE_SHA_TAG}" "${IMAGE_BASE_MCP}:${MAJOR}"

            MINOR="${BASH_REMATCH[1]}.${BASH_REMATCH[2]}"
            crane copy "${IMAGE_BASE_CHATBOT}:${SOURCE_SHA_TAG}" "${IMAGE_BASE_CHATBOT}:${MINOR}"
            crane copy "${IMAGE_BASE_MCP}:${SOURCE_SHA_TAG}" "${IMAGE_BASE_MCP}:${MINOR}"

          else
            echo "Release tag $RELEASE_TAG is not semver (vMAJOR.MINOR.PATCH). Skipping major/minor tags."
            MAJOR=""
            MINOR=""
          fi
